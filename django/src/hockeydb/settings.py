"""
Django settings for hockeydb project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from hockeydb.build_mode import BuildMode
from os import environ
from warnings import warn

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# These options have been improved from the defaults, and should be more suitable for production.
# However, it is still necessary to modify some of the values, as they are insecure.
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
INSECURE_KEY = 'django-insecure-wn@pg9nu2uw6car=7ht!5l+2cz6%xk)(sp7+*ve2+m=86q0_8e'
SECRET_KEY_VAR = 'HOCKEYDB_SECRET_KEY'
if BuildMode.mode() == BuildMode.DEV:
    SECRET_KEY = INSECURE_KEY
else:
    try:
        SECRET_KEY = environ[SECRET_KEY_VAR]
    except KeyError:
        warn(f"\033[5;31mProduction mode is enabled but {SECRET_KEY_VAR} is not set, using insecure default. This is not safe for production!\033[0m")
        SECRET_KEY = INSECURE_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = BuildMode.is_dev()

# In development mode, when DEBUG = True, django chooses a safe development default.
# In production mode, this must be set via environment variable to the DNS name the server will be accessible at.
# In production, nginx is set to forward the host properly using the `Host` header
ALLOWED_HOSTS_VAR = "HOCKEYDB_ALLOWED_HOSTS"
if BuildMode.mode() == BuildMode.DEV:
    ALLOWED_HOSTS = []
else:
    try:
        ALLOWED_HOSTS = environ[ALLOWED_HOSTS_VAR].split(",")
    except KeyError:
        warn(f"\033[5;31mProduction mode is enabled but {ALLOWED_HOSTS_VAR} is not set, using unsafe default. This is not safe for production!\033[0m")
        ALLOWED_HOSTS = ['.localhost', '127.0.0.1', '[::1]']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hockeydb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hockeydb.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DB_NAME_VAR = 'HOCKEYDB_DB_NAME'
DB_USER_VAR = 'HOCKEYDB_DB_USERNAME'
DB_PASS_VAR = 'HOCKEYDB_DB_PASSWORD'
if BuildMode.mode() == BuildMode.DEV:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    if DB_PASS_VAR not in environ:
        warn(f"\033[5;31mProduction mode is enabled but {DB_PASS_VAR} is not set. Unless you are doing something insecure, database will fail to connect!\033[0m")    
    
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'HOST': 'hockeydb-mysql',
            'NAME': ('hockeydb' if not DB_NAME_VAR in environ else environ[DB_NAME_VAR]),   # If DB_NAME_VAR is set, use that else use 'hockeydb'
            'USER': ('hockeydb' if not DB_USER_VAR in environ else environ[DB_USER_VAR]),
            'PASSWORD': ('' if not DB_PASS_VAR in environ else environ[DB_PASS_VAR]),
            'PORT': '3306'                                                                  # Default port  
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
#TODO: Fix serving of static assets

STATIC_URL = 'static/'
STATIC_ROOT = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
